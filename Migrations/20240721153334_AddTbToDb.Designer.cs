// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TherapiCareTest.Data;

#nullable disable

namespace TherapiCareTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240721153334_AddTbToDb")]
    partial class AddTbToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-role-id",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "therapist-role-id",
                            Name = "Therapist",
                            NormalizedName = "THERAPIST"
                        },
                        new
                        {
                            Id = "parent-role-id",
                            Name = "Parent",
                            NormalizedName = "PARENT"
                        },
                        new
                        {
                            Id = "custService-role-id",
                            Name = "CustomerService",
                            NormalizedName = "CUSTOMERSERVICE"
                        },
                        new
                        {
                            Id = "customer-role-id",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin-user-id",
                            RoleId = "admin-role-id"
                        },
                        new
                        {
                            UserId = "therapist-user-id",
                            RoleId = "therapist-role-id"
                        },
                        new
                        {
                            UserId = "parent-user-id",
                            RoleId = "parent-role-id"
                        },
                        new
                        {
                            UserId = "custService-user-id",
                            RoleId = "custService-role-id"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TherapiCareTest.Models.Admin", b =>
                {
                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Announcement", b =>
                {
                    b.Property<int>("a_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("a_id"));

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("a_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("a_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("a_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("a_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("a_id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("TherapiCareTest.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a728445-fa62-4e53-ae63-59c96b1bb928",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ5HaAFq2Ane9/BaNBQX624uvbOshAzhRBP0a5XLpg1eJFDf4lksWGZ0VLBodGmuKA==",
                            PhoneNumber = "0126983514",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "therapist-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb52fb12-2ad3-460b-b99a-57afe460aded",
                            Email = "therapist@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST@GMAIL.COM",
                            NormalizedUserName = "THERAPIST@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFRETc9/zNG6vNd/a/MhBtTO1mOAYCl9lBmZie9mmqEfyZrEjbKOAzigmEDrroxIxQ==",
                            PhoneNumber = "0184521367",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "therapist@gmail.com"
                        },
                        new
                        {
                            Id = "parent-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e294a647-0c24-4ae6-94a2-18fc4cf66e38",
                            Email = "parent@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PARENT@GMAIL.COM",
                            NormalizedUserName = "PARENT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEObniKfSsxdo/DUmBM4dp6aBLvQsNKQjambKazZ5SuKhatdwrWJgYiTUlVUJmpqi3A==",
                            PhoneNumber = "0198745632",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "parent@gmail.com"
                        },
                        new
                        {
                            Id = "custService-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fdc1cb5-ae6b-4305-8904-40115a00efaf",
                            Email = "customerservice@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMERSERVICE@GMAIL.COM",
                            NormalizedUserName = "CUSTOMERSERVICE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOCWaziQhZkAsXdb1VwJCWVJL5Prt2tHy6oGEchPOJp4fDeawCjo1NrDp0dBRSn9hw==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "customerservice@gmail.com"
                        });
                });

            modelBuilder.Entity("TherapiCareTest.Models.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentReceipt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TherapyProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TherapyProgramId");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("TherapiCareTest.Models.CustomerService", b =>
                {
                    b.Property<string>("CustServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("reportStatus")
                        .HasColumnType("int");

                    b.HasKey("CustServiceId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("CustomerServices");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Parent", b =>
                {
                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseholdIncome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("TherapiCareTest.Models.ProgramStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.HasIndex("StudentId");

                    b.ToTable("ProgramStudents");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("TherapistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("academicPerformance")
                        .HasColumnType("int");

                    b.Property<int>("alphabet")
                        .HasColumnType("int");

                    b.Property<string>("analysisProblem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("attention")
                        .HasColumnType("int");

                    b.Property<int>("auditory")
                        .HasColumnType("int");

                    b.Property<int>("bodyLanguage")
                        .HasColumnType("int");

                    b.Property<string>("cognitiveProgressNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("colors")
                        .HasColumnType("int");

                    b.Property<int>("concentration")
                        .HasColumnType("int");

                    b.Property<int>("cooperative")
                        .HasColumnType("int");

                    b.Property<int>("difficultiesSeparateWithParents")
                        .HasColumnType("int");

                    b.Property<int>("easilyDistracted")
                        .HasColumnType("int");

                    b.Property<int>("enterByHimself")
                        .HasColumnType("int");

                    b.Property<int>("enterWithPrompting")
                        .HasColumnType("int");

                    b.Property<int>("eyeContactObject")
                        .HasColumnType("int");

                    b.Property<int>("eyeContactPerson")
                        .HasColumnType("int");

                    b.Property<int>("facialExpression")
                        .HasColumnType("int");

                    b.Property<int>("fineMotorFunctionCopying")
                        .HasColumnType("int");

                    b.Property<int>("fineMotorFunctionCubes")
                        .HasColumnType("int");

                    b.Property<int>("fineMotorFunctionGraspRelease")
                        .HasColumnType("int");

                    b.Property<int>("fineMotorFunctionImitate")
                        .HasColumnType("int");

                    b.Property<int>("fineMotorFunctionImmature")
                        .HasColumnType("int");

                    b.Property<int>("fineMotorFunctionMature")
                        .HasColumnType("int");

                    b.Property<int>("fineMotorFunctionPutBlock")
                        .HasColumnType("int");

                    b.Property<int>("fineMotorFunctionReaching")
                        .HasColumnType("int");

                    b.Property<int>("fineMotorFunctionScribbles")
                        .HasColumnType("int");

                    b.Property<int>("foldingClothes")
                        .HasColumnType("int");

                    b.Property<int>("greetingByHimself")
                        .HasColumnType("int");

                    b.Property<int>("greetingWithPrompt")
                        .HasColumnType("int");

                    b.Property<int>("grossMotorFunctionBroadJump")
                        .HasColumnType("int");

                    b.Property<int>("grossMotorFunctionCrawling")
                        .HasColumnType("int");

                    b.Property<int>("grossMotorFunctionJumping")
                        .HasColumnType("int");

                    b.Property<int>("grossMotorFunctionKickBall")
                        .HasColumnType("int");

                    b.Property<int>("grossMotorFunctionStanding")
                        .HasColumnType("int");

                    b.Property<int>("grossMotorFunctionThrowBall")
                        .HasColumnType("int");

                    b.Property<int>("grossMotorFunctionWalking")
                        .HasColumnType("int");

                    b.Property<int>("gustatory")
                        .HasColumnType("int");

                    b.Property<int>("hangingClothes")
                        .HasColumnType("int");

                    b.Property<int>("independent")
                        .HasColumnType("int");

                    b.Property<int>("initiateAnswerQuestion")
                        .HasColumnType("int");

                    b.Property<int>("isolation")
                        .HasColumnType("int");

                    b.Property<int>("jointMobility")
                        .HasColumnType("int");

                    b.Property<int>("makingDrinks")
                        .HasColumnType("int");

                    b.Property<int>("manipulative")
                        .HasColumnType("int");

                    b.Property<int>("maximumAssistance")
                        .HasColumnType("int");

                    b.Property<int>("memoryFunction")
                        .HasColumnType("int");

                    b.Property<int>("moneyManagement")
                        .HasColumnType("int");

                    b.Property<int>("muscleEndurance")
                        .HasColumnType("int");

                    b.Property<int>("muscleStrength")
                        .HasColumnType("int");

                    b.Property<int>("muscleTone")
                        .HasColumnType("int");

                    b.Property<int>("mute")
                        .HasColumnType("int");

                    b.Property<int>("numberOfSessionsAttended")
                        .HasColumnType("int");

                    b.Property<int>("numbers")
                        .HasColumnType("int");

                    b.Property<string>("objectiveAssessmentNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("occupationRemark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("olfactory")
                        .HasColumnType("int");

                    b.Property<int>("passive")
                        .HasColumnType("int");

                    b.Property<int>("physicalPrompting")
                        .HasColumnType("int");

                    b.Property<int>("prepareSimpleFood")
                        .HasColumnType("int");

                    b.Property<int>("problemSolving")
                        .HasColumnType("int");

                    b.Property<int>("proprioception")
                        .HasColumnType("int");

                    b.Property<int>("rangeOfMotion")
                        .HasColumnType("int");

                    b.Property<int>("refuseToEnter")
                        .HasColumnType("int");

                    b.Property<int>("reluctant")
                        .HasColumnType("int");

                    b.Property<int>("repatitivePrompting")
                        .HasColumnType("int");

                    b.Property<string>("reportStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("shapes")
                        .HasColumnType("int");

                    b.Property<int>("sharing")
                        .HasColumnType("int");

                    b.Property<string>("staffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("stayInGrouping")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.Property<string>("studentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subjectiveAssessmentNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sweepFloor")
                        .HasColumnType("int");

                    b.Property<int>("tactile")
                        .HasColumnType("int");

                    b.Property<int>("takingTurn")
                        .HasColumnType("int");

                    b.Property<int>("temperedTantrum")
                        .HasColumnType("int");

                    b.Property<string>("therapistIncharge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("timeConcept")
                        .HasColumnType("int");

                    b.Property<int>("toiletTrained")
                        .HasColumnType("int");

                    b.Property<string>("treatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("trunkControlBalance")
                        .HasColumnType("int");

                    b.Property<string>("txPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("usePhone")
                        .HasColumnType("int");

                    b.Property<int>("verbalPrompting")
                        .HasColumnType("int");

                    b.Property<int>("verbalRespond")
                        .HasColumnType("int");

                    b.Property<int>("vestibular")
                        .HasColumnType("int");

                    b.Property<int>("visual")
                        .HasColumnType("int");

                    b.Property<int>("voiceClarify")
                        .HasColumnType("int");

                    b.Property<int>("withCryingRefuse")
                        .HasColumnType("int");

                    b.Property<int>("withSupervision")
                        .HasColumnType("int");

                    b.Property<int>("writingSkill")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TherapistId");

                    b.HasIndex("studentId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProgramStudentId")
                        .HasColumnType("int");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramStudentId");

                    b.HasIndex("SlotId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TherapistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("TherapistId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeadlineDiagnoseByDoctor")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nasionality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OccupationalTherapy")
                        .HasColumnType("bit");

                    b.Property<string>("Others")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pediatricians")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendedByHospital")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SpeechTherapy")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Therapist", b =>
                {
                    b.Property<string>("TherapistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TherapistId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("Therapists");
                });

            modelBuilder.Entity("TherapiCareTest.Models.TherapyProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WeekdayPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WeekendPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TherapyPrograms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TherapiCareTest.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TherapiCareTest.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TherapiCareTest.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TherapiCareTest.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TherapiCareTest.Models.Admin", b =>
                {
                    b.HasOne("TherapiCareTest.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Admin")
                        .HasForeignKey("TherapiCareTest.Models.Admin", "ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Billing", b =>
                {
                    b.HasOne("TherapiCareTest.Models.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("TherapiCareTest.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TherapiCareTest.Models.TherapyProgram", "TherapyProgram")
                        .WithMany()
                        .HasForeignKey("TherapyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");

                    b.Navigation("TherapyProgram");
                });

            modelBuilder.Entity("TherapiCareTest.Models.CustomerService", b =>
                {
                    b.HasOne("TherapiCareTest.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("CustomerService")
                        .HasForeignKey("TherapiCareTest.Models.CustomerService", "ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Parent", b =>
                {
                    b.HasOne("TherapiCareTest.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Parent")
                        .HasForeignKey("TherapiCareTest.Models.Parent", "ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("TherapiCareTest.Models.ProgramStudent", b =>
                {
                    b.HasOne("TherapiCareTest.Models.TherapyProgram", "TherapyProgram")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TherapiCareTest.Models.Student", "Student")
                        .WithMany("ProgramStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("TherapyProgram");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Report", b =>
                {
                    b.HasOne("TherapiCareTest.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("TherapiCareTest.Models.Therapist", null)
                        .WithMany("Reports")
                        .HasForeignKey("TherapistId");

                    b.HasOne("TherapiCareTest.Models.Student", null)
                        .WithMany("Reports")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Schedule", b =>
                {
                    b.HasOne("TherapiCareTest.Models.ProgramStudent", "ProgramStudent")
                        .WithMany()
                        .HasForeignKey("ProgramStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TherapiCareTest.Models.Slot", "Slot")
                        .WithMany("Schedules")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramStudent");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Session", b =>
                {
                    b.HasOne("TherapiCareTest.Models.TherapyProgram", "TherapyProgram")
                        .WithMany("Sessions")
                        .HasForeignKey("ProgramId");

                    b.Navigation("TherapyProgram");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Slot", b =>
                {
                    b.HasOne("TherapiCareTest.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TherapiCareTest.Models.Therapist", "Therapist")
                        .WithMany("Slots")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Student", b =>
                {
                    b.HasOne("TherapiCareTest.Models.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Therapist", b =>
                {
                    b.HasOne("TherapiCareTest.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Therapist")
                        .HasForeignKey("TherapiCareTest.Models.Therapist", "ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("TherapiCareTest.Models.ApplicationUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("CustomerService");

                    b.Navigation("Parent");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Parent", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Slot", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Student", b =>
                {
                    b.Navigation("ProgramStudents");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("TherapiCareTest.Models.Therapist", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("TherapiCareTest.Models.TherapyProgram", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
